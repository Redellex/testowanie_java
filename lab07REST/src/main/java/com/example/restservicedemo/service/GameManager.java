package com.example.restservicedemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.restservicedemo.domain.Game;

public class GameManager {

	private Connection connection;

	private static final String URL = "jdbc:hsqldb:hsql://localhost/workdb";
	private static final String CREATE_TABLE_GAME = "CREATE TABLE Game(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(30), genre varchar(30))";
	
	private PreparedStatement addGameStmt;
	private PreparedStatement deleteAllGamesStmt;
	private PreparedStatement deleteGameByIdStmt;
	private PreparedStatement getAllGamesStmt;
	private PreparedStatement getGameByIdStmt;
	private PreparedStatement updateGameStmt;

	private Statement statement;

	public GameManager() {
		try {
			connection = DriverManager.getConnection(URL);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Game".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(CREATE_TABLE_GAME);

			addGameStmt = connection
					.prepareStatement("INSERT INTO Game (id, name, genre) VALUES (?, ?, ?)");
			deleteAllGamesStmt = connection
					.prepareStatement("DELETE FROM Game");
			getAllGamesStmt = connection
					.prepareStatement("SELECT * FROM Game");
			getGameByIdStmt = connection
					.prepareStatement("SELECT * FROM Game where id = ?");
			deleteGameByIdStmt = connection
					.prepareStatement("DELETE FROM Game WHERE id = ?");
			updateGameStmt = connection
					//Nowe wpierw, potem szukane.
					.prepareStatement("UPDATE Person SET name = ?, genre = ?, WHERE id = ?");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}

	public void clearGames() {
		try {
			deleteAllGamesStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public int addGame(Game game) {
		int count = 0;
		try {
			addGameStmt.setLong(1, game.getId());
			addGameStmt.setString(2, game.getName());
			addGameStmt.setString(3, game.getGenre());

			count = addGameStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	public int deleteGame(long id){
		int count = 0;
		try {
			deleteGameByIdStmt.setLong(1, id);
			
			count = deleteGameByIdStmt.executeUpdate();
		} catch (SQLException e){
			e.printStackTrace();
		}
		return count;
	}
	
	public int updateGame(long id, String name, String genre){
		int count = 0;
		try {
			updateGameStmt.setString(1, name);
			updateGameStmt.setString(2, genre);
			updateGameStmt.setLong(3, id);
		}
		catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public List<Game> getAllGames() {
		List<Game> games = new ArrayList<Game>();

		try {
			ResultSet rs = getAllGamesStmt.executeQuery();

			while (rs.next()) {
				Game p = new Game();
				p.setId(rs.getInt("id"));
				p.setName(rs.getString("name"));
				p.setGenre(rs.getString("genre"));
				games.add(p);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return games;
	}

	public Game getGame(Long id) {
		Game p = new Game();
		try {
			getGameByIdStmt.setLong(1, id);
			ResultSet rs = getGameByIdStmt.executeQuery();

			while (rs.next()) {
				p.setId(rs.getInt("id"));
				p.setName(rs.getString("name"));
				p.setGenre(rs.getString("genre"));
				break;
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return p;
	}

}
