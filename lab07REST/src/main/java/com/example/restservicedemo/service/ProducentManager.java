package com.example.restservicedemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.restservicedemo.domain.Producent;

public class ProducentManager {
	private Connection connection;

	private static final String URL = "jdbc:hsqldb:hsql://localhost/workdb";
	private static final String CREATE_TABLE_PRODUCENT = "CREATE TABLE Producent(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(30), idGame BIGINT FOREIGN KEY REFERENCES game(id) on delete set null);";
	
	private PreparedStatement addProducentStmt;
	private PreparedStatement deleteAllProducentsStmt;
	private PreparedStatement deleteProducentByIdStmt;
	private PreparedStatement getAllProducentsStmt;
	private PreparedStatement getProducentByIdStmt;
	private PreparedStatement updateProducentStmt;
	
	private Statement statement;
	
	public ProducentManager() {
		try {
			connection = DriverManager.getConnection(URL);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Producent".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(CREATE_TABLE_PRODUCENT);

			addProducentStmt = connection
					.prepareStatement("INSERT INTO Producent (id, name, idGame) VALUES (?, ?, ?)");
			deleteAllProducentsStmt = connection
					.prepareStatement("DELETE FROM Producent");
			getAllProducentsStmt = connection
					.prepareStatement("SELECT * FROM Producent");
			getProducentByIdStmt = connection
					.prepareStatement("SELECT * FROM Producent where id = ?");
			deleteProducentByIdStmt = connection
					.prepareStatement("DELETE FROM Producent WHERE id = ?");
			updateProducentStmt = connection
					//Nowe wpierw, potem szukane.
					.prepareStatement("UPDATE Producent SET name = ?, idGame = ? WHERE id = ?");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	Connection getConnection() {
		return connection;
	}
	
	public void clearProducents() {
		try {
			deleteAllProducentsStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public int addProducent(Producent producent) {
		int count = 0;
		try {
			addProducentStmt.setLong(1, producent.getId());
			addProducentStmt.setString(2, producent.getName());
			addProducentStmt.setLong(3, producent.getIdGame());

			count = addProducentStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	public int deleteProducent(long id){
		int count = 0;
		try {
			deleteProducentByIdStmt.setLong(1, id);
			
			count = deleteProducentByIdStmt.executeUpdate();
		} catch (SQLException e){
			e.printStackTrace();
		}
		return count;
	}
	
	public int updateProducent(long id, String name, long idGame){
		int count = 0;
		try {
			updateProducentStmt.setString(1, name);
			updateProducentStmt.setLong(2, idGame);
			updateProducentStmt.setLong(3, id);
			
			count = updateProducentStmt.executeUpdate();
		}
		catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	public List<Producent> getAllProducents() {
		List<Producent> producents = new ArrayList<Producent>();

		try {
			ResultSet rs = getAllProducentsStmt.executeQuery();

			while (rs.next()) {
				Producent p = new Producent();
				p.setId(rs.getInt("id"));
				p.setName(rs.getString("name"));
				p.setIdGame(rs.getInt("idGame"));
				producents.add(p);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return producents;
	}
	
	public Producent getProducent(Long id) {
		Producent p = new Producent();
		try {
			getProducentByIdStmt.setLong(1, id);
			ResultSet rs = getProducentByIdStmt.executeQuery();

			while (rs.next()) {
				p.setId(rs.getInt("id"));
				p.setName(rs.getString("name"));
				p.setIdGame(rs.getInt("idGame"));
				break;
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return p;
	}
}
